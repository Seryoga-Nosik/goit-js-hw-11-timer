{"version":3,"sources":["js/timer.js","index.js"],"names":["CountdownTimer","constructor","targetDate","init","getDeltaTime","setInterval","currentTime","Date","now","deltaTime","getTimeComponents","time","days","pad","Math","floor","hours","mins","secs","updateClockface","value","String","padStart","daysEl","document","querySelector","hoursEl","minsEl","secsEl","textContent","timer","selector"],"mappings":";;;AAAA,MAAMA,EACJC,aAAY,WAAEC,GAAe,IACtBA,KAAAA,WAAaA,EACbC,KAAAA,OAGPA,OACOC,KAAAA,eACLC,YAAY,KACLD,KAAAA,gBACJ,KAGLA,eACQE,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKP,WAAaI,EAC/BI,KAAAA,kBAAkBD,GAGzBC,kBAAkBC,GACVC,MAAAA,EAAO,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QACnCK,EAAQ,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAC9DM,EAAO,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MACxDO,EAAO,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,MAEnDQ,KAAAA,gBAAgBP,EAAMI,EAAOC,EAAMC,GAG1CL,IAAIO,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCH,gBAAgBP,EAAMI,EAAOC,EAAMC,GAC3BK,MAAAA,EAASC,SAASC,cAAc,2BAChCC,EAAUF,SAASC,cAAc,4BACjCE,EAASH,SAASC,cAAc,2BAChCG,EAASJ,SAASC,cAAc,2BACtCF,EAAOM,eAAiBjB,IACxBc,EAAQG,eAAiBb,IACzBW,EAAOE,eAAiBZ,IACxBW,EAAOC,eAAiBX,KAI5B,MAAMY,EAAQ,IAAI9B,EAAe,CAC/B+B,SAAU,WACV7B,WAAY,IAAIK,KAAK;;AC7CvB,aADA,QAAA,oBACA,QAAA","file":"src.784e6ce8.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ targetDate } = {}) {\n    this.targetDate = targetDate;\n    this.init();\n  }\n\n  init() {\n    this.getDeltaTime();\n    setInterval(() => {\n      this.getDeltaTime();\n    }, 1000);\n  }\n\n  getDeltaTime() {\n    const currentTime = Date.now();\n    const deltaTime = this.targetDate - currentTime;\n    this.getTimeComponents(deltaTime);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    this.updateClockface(days, hours, mins, secs);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  updateClockface(days, hours, mins, secs) {\n    const daysEl = document.querySelector('span[data-value=\"days\"]');\n    const hoursEl = document.querySelector('span[data-value=\"hours\"]');\n    const minsEl = document.querySelector('span[data-value=\"mins\"]');\n    const secsEl = document.querySelector('span[data-value=\"secs\"]');\n    daysEl.textContent = `${days}`;\n    hoursEl.textContent = `${hours}`;\n    minsEl.textContent = `${mins}`;\n    secsEl.textContent = `${secs}`;\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Dec 24, 2021'),\n});\n","import './sass/main.scss';\nimport './js/timer';\n"]}