{"version":3,"sources":["js/timer.js","index.js"],"names":["refs","daysEl","document","querySelector","hoursEl","minsEl","secsEl","CountdownTimer","constructor","targetDate","init","getDeltaTime","setInterval","currentTime","Date","now","deltaTime","getTimeComponents","time","days","Math","floor","hours","pad","mins","secs","updateClockface","value","String","padStart","textContent","timer","selector"],"mappings":";;;AAAA,MAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,2BAC/BC,QAASF,SAASC,cAAc,4BAChCE,OAAQH,SAASC,cAAc,2BAC/BG,OAAQJ,SAASC,cAAc,4BAGjC,MAAMI,EACJC,aAAY,WAAEC,GAAe,IACtBA,KAAAA,WAAaA,EACbC,KAAAA,OAGPA,OACOC,KAAAA,eACLC,YAAY,KACLD,KAAAA,gBACJ,KAGLA,eACQE,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKP,WAAaI,EAC/BI,KAAAA,kBAAkBD,GAGzBC,kBAAkBC,GACVC,MAAAA,EAAOC,KAAKC,MAAMH,EAAQ,OAC1BI,EAAQ,KAAKC,IAAIH,KAAKC,MAAOH,EAAQ,MAAyB,OAC9DM,EAAO,KAAKD,IAAIH,KAAKC,MAAOH,EAAQ,KAAoB,MACxDO,EAAO,KAAKF,IAAIH,KAAKC,MAAOH,EAAQ,IAAc,MAEnDQ,KAAAA,gBAAgBP,EAAMG,EAAOE,EAAMC,GAG1CF,IAAII,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCH,gBAAgBP,EAAMG,EAAOE,EAAMC,GACjCzB,EAAKC,OAAO6B,eAAiBX,IAC7BnB,EAAKI,QAAQ0B,eAAiBR,IAC9BtB,EAAKK,OAAOyB,eAAiBN,IAC7BxB,EAAKM,OAAOwB,eAAiBL,KAIjC,MAAMM,EAAQ,IAAIxB,EAAe,CAC/ByB,SAAU,WACVvB,WAAY,IAAIK,KAAK;;AChDvB,aADA,QAAA,oBACA,QAAA","file":"src.2496166c.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  daysEl: document.querySelector('span[data-value=\"days\"]'),\n  hoursEl: document.querySelector('span[data-value=\"hours\"]'),\n  minsEl: document.querySelector('span[data-value=\"mins\"]'),\n  secsEl: document.querySelector('span[data-value=\"secs\"]'),\n};\n\nclass CountdownTimer {\n  constructor({ targetDate } = {}) {\n    this.targetDate = targetDate;\n    this.init();\n  }\n\n  init() {\n    this.getDeltaTime();\n    setInterval(() => {\n      this.getDeltaTime();\n    }, 1000);\n  }\n\n  getDeltaTime() {\n    const currentTime = Date.now();\n    const deltaTime = this.targetDate - currentTime;\n    this.getTimeComponents(deltaTime);\n  }\n\n  getTimeComponents(time) {\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    this.updateClockface(days, hours, mins, secs);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  updateClockface(days, hours, mins, secs) {\n    refs.daysEl.textContent = `${days}`;\n    refs.hoursEl.textContent = `${hours}`;\n    refs.minsEl.textContent = `${mins}`;\n    refs.secsEl.textContent = `${secs}`;\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Dec 24, 2021'),\n});\n","import './sass/main.scss';\nimport './js/timer';\n"]}